##
## Copyright 2004-2014 the Seasar Foundation and the Others.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${database.allClassCopyright}package ${myBaseEntityPackageName};
#set ($myClassName = "${myBaseObjectClassName}")

import scala.collection.JavaConverters._

import java.lang.Long;
import java.io.Serializable;
import java.util.Set;
#if ($table.hasUtilDateColumn())
import java.util.Date;
#end

import org.seasar.dbflute.dbmeta.DBMeta;
#if (!$table.hasAllCommonColumn() || $table.hasRelation())
import org.seasar.dbflute.Entity;
#end
#if ($table.needsRelationOptionalEntityImport())
import ${database.relationOptionalEntityClassName};
#end
import org.seasar.dbflute.Entity.EntityUniqueDrivenProperties;
import org.seasar.dbflute.Entity.EntityModifiedProperties;
import org.seasar.dbflute.Entity.FunCustodial;
import org.seasar.dbflute.helper.beans.DfCoupleProperties;
#if ($table.hasAllCommonColumn())
import ${glPackageBaseCommon}.${glEntityDefinedCommonColumn};
#end
#if (!$isSql2Entity)
import ${glPackageBaseCommon}.${glDBMetaInstanceHandler};
#end
#if ($table.hasClassification())
import ${glPackageBaseCommon}.${glCDef};
#end
import ${myExtendedEntityPackageName}._;
#if ($table.isLoadableCustomizeEntity())
import ${glPackageExtendedEntity}._;
#end
#set ($myEntityInterfaceName = "")
#if (${table.hasAllCommonColumn()})
  #set ($myEntityInterfaceName = ${glEntityDefinedCommonColumn})
#else
  #set ($myEntityInterfaceName = "Entity")
#end
#if ($table.hasRelationalNullObjectProviderImport())
import ${table.relationalNullObjectProviderPackage}._;
#end

/**
 * The entity of ${table.basicInfoDispString}. <br />
#if ($table.isCommentForJavaDocValid())
 * ${table.commentForJavaDoc}
#end
 * <pre>
 * [primary-key]
 *     ${table.primaryKeyNameCommaString}
 * 
 * [column]
 *     ${table.columnNameCommaString}
 * 
 * [sequence]
 *     ${table.definedSequenceName}
 * 
 * [identity]
 *     ${table.identityColumnName}
 * 
 * [version-no]
 *     ${table.versionNoColumnName}
 * 
 * [foreign table]
 *     ${table.foreignTableNameCommaString}
 * 
 * [referrer table]
 *     ${table.referrerTableNameCommaString}
 * 
 * [foreign property]
 *     ${table.foreignPropertyNameCommaString}
 * 
 * [referrer property]
 *     ${table.referrerPropertyNameCommaString}
 * 
 * [get/set template]
 * /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
#foreach ($col in $table.columns)
 * ${col.javaNative} ${col.uncapitalisedJavaName} = entity.get${col.javaName}();
#end
#foreach ($col in $table.columns)
 * entity.set${col.javaName}(${col.uncapitalisedJavaName});
#end
 * = = = = = = = = = =/
 * </pre>
 * @author ${database.classAuthor}
 */
abstract class $myClassName extends ${myEntityInterfaceName} with Serializable with Cloneable with DfCoupleProperties {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    // -----------------------------------------------------
    //                                                Column
    //                                                ------
#foreach ($col in $table.columns)
    /** ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} */
    protected var _${col.uncapitalisedJavaName}: ${col.javaNative} = null;

#end
    // -----------------------------------------------------
    //                                              Internal
    //                                              --------
    /** The unique-driven properties for this entity. (NotNull) */
    protected val __uniqueDrivenProperties: EntityUniqueDrivenProperties = newUniqueDrivenProperties();

    /** The modified properties for this entity. (NotNull) */
    protected val __modifiedProperties: EntityModifiedProperties = newModifiedProperties();
#if ($table.hasAllCommonColumn())

    /** Is common column auto set up effective? */
    protected var __canCommonColumnAutoSetup: Boolean = true;
#end

    /** Is the entity created by DBFlute select process? */
    protected var __createdBySelect: Boolean = false;

    // ===================================================================================
    //                                                                          Table Name
    //                                                                          ==========
    /**
     * {@inheritDoc}
     */
    def getTableDbName(): String = {
        return "${table.tableDbName}";
    }

    /**
     * {@inheritDoc}
     */
    def getTablePropertyName(): String = { // according to Java Beans rule
        return "${table.javaBeansRulePropertyName}";
    }

    // ===================================================================================
    //                                                                              DBMeta
    //                                                                              ======
    /**
     * {@inheritDoc}
     */
    def getDBMeta(): DBMeta = {
#if ($isSql2Entity)
        return ${myDBMetaPackageName}.${myDBMetaClassName};
#else
        return ${glDBMetaInstanceHandler}.findDBMeta(getTableDbName());
#end
    }

    // ===================================================================================
    //                                                                         Primary Key
    //                                                                         ===========
    /**
     * {@inheritDoc}
     */
    def hasPrimaryKeyValue(): Boolean = {
#foreach ($col in $table.primaryKey)
        if (${col.uncapitalisedJavaName}() == null) { return false; }
#end
        return ${table.hasPrimaryKey()};
    }
#foreach ($uq in $table.keyableUniqueList)

    /**
     * To be unique by the unique column. <br />
     * You can update the entity by the key when entity update (NOT batch update).
     * ${uq.argsJavaDocString}
     */
    def uniqueBy${uq.javaNameKeyword}(${uq.argsString}): Unit = {
        __uniqueDrivenProperties.clear();
#foreach ($col in $uq.columnList)
        __uniqueDrivenProperties.addPropertyName("${col.javaBeansRulePropertyName}");
#end
        ${uq.argsSetupString}
    }
#end

    /**
     * {@inheritDoc}
     */
    def myuniqueDrivenProperties(): Set[String] = {
        return __uniqueDrivenProperties.getPropertyNames();
    }

    def newUniqueDrivenProperties(): EntityUniqueDrivenProperties = {
        return new EntityUniqueDrivenProperties();
    }

#if ($table.hasClassification())
    // ===================================================================================
    //                                                             Classification Property
    //                                                             =======================
#foreach ($col in $table.columns)
#if ($col.hasClassification())
#set ($classificationTop = $database.getClassificationTop($col.classificationName))
    /**
     * Get the value of ${col.uncapitalisedJavaName} as the classification of ${col.classificationName}. <br />
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br />
#if ($classificationTop.hasTopComment())
     * ${classificationTop.topCommentForJavaDoc}
#end
     * <p>It's treated as case insensitive and if the code value is null, it returns null.</p>
     * @return The instance of classification definition (as ENUM type). (NullAllowed: when the column value is null)
     */
    def ${col.uncapitalisedJavaName}As${col.classificationName}(): ${glCDef}.${col.classificationName} = {
        return ${glCDef}.${col.classificationName}.codeOf(${col.uncapitalisedJavaName}());
    }

    /**
     * Set the value of ${col.uncapitalisedJavaName} as the classification of ${col.classificationName}. <br />
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br />
#if ($classificationTop.hasTopComment())
     * ${classificationTop.topCommentForJavaDoc}
#end
     * @param cdef The instance of classification definition (as ENUM type). (NullAllowed: if null, null value is set to the column)
     */
    def ${col.uncapitalisedJavaName}As${col.classificationName}(cdef: ${glCDef}.${col.classificationName}): Unit = {
#if ($col.isJavaNativeNumberObject())
        ${col.uncapitalisedJavaName}(if (cdef != null) { FunCustodial.toNumber(cdef.code, classOf[${col.javaNative}]) } else { null });
#elseif ($col.isJavaNativeBooleanObject())
        ${col.uncapitalisedJavaName}(if (cdef != null) { FunCustodial.toBoolean(cdef.code) } else { null });
#else
        ${col.uncapitalisedJavaName}(if (cdef != null) { cdef.code } else { null });
#end
    }
#if ($classificationTop.isSisterBooleanHandling())

    /**
     * Set the value of ${col.uncapitalisedJavaName} as boolean. <br />
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br />
#if ($classificationTop.hasTopComment())
     * ${classificationTop.topCommentForJavaDoc}
#end
     * @param determination The determination, true or false. (NullAllowed: if null, null value is set to the column)
     */
    def ${col.uncapitalisedJavaName}AsBoolean(determination: Boolean): Unit = {
        ${col.uncapitalisedJavaName}As${col.classificationName}(${glCDef}.${col.classificationName}.codeOf(determination));
    }
#end

#end
#end
    // ===================================================================================
    //                                                              Classification Setting
    //                                                              ======================
#foreach ($col in $table.columns)
#if ($col.hasClassification())
#foreach ($classificationElement in $col.classificationTop.classificationElementList)
    /**
     * Set the value of ${col.uncapitalisedJavaName} as ${classificationElement.name} (${classificationElement.code}). <br />
     * $database.buildClassificationApplicationCommentForJavaDoc($classificationElement)
     */
#if ($classificationElement.isDeprecated())
    @Deprecated
#end
    def ${col.uncapitalisedJavaName}_${classificationElement.name}(): Unit = {
        ${col.uncapitalisedJavaName}As${col.classificationName}(${glCDef}.${col.classificationName}.${classificationElement.name});
    }

#if ($database.isMakeEntityOldStyleClassify())
    /**
     * Same as set${col.javaName}_${classificationElement.name}. <br />
     * $database.buildClassificationApplicationCommentForJavaDoc($classificationElement)
     */
    def classify${col.javaName}${classificationElement.name}(): Unit = {
        ${col.uncapitalisedJavaName}_${classificationElement.name}();
    }

#end
#end
#if ($database.isMakeEntityOldStyleClassify())
    /**
     * Same as set${col.javaName}As${col.classificationName}(cdef). <br />
     * @param cdef The instance of classification definition (as ENUM type). (NullAllowed)
     */
    def classify${col.javaName}(cdef: ${glCDef}.${col.classificationName}): Unit = {
        ${col.uncapitalisedJavaName}As${col.classificationName}(cdef);
    }

#end
#end
#end
    // ===================================================================================
    //                                                        Classification Determination
    //                                                        ============================
#foreach ($col in $table.columns)
#if ($col.hasClassification())
#foreach ($classificationElement in $col.classificationTop.classificationElementList)
    /**
     * Is the value of ${col.uncapitalisedJavaName} ${classificationElement.name}? <br />
     * $database.buildClassificationApplicationCommentForJavaDoc($classificationElement)
     * <p>It's treated as case insensitive and if the code value is null, it returns false.</p>
     * @return The determination, true or false.
     */
#if ($classificationElement.isDeprecated())
    @Deprecated
#end
    def is${col.javaName}_${classificationElement.name}(): Boolean = {
        val cdef: ${glCDef}.${col.classificationName} = ${col.uncapitalisedJavaName}As${col.classificationName}();
        return if (cdef != null) { cdef.equals(${glCDef}.${col.classificationName}.${classificationElement.name}) } else { false };
    }

#end
#foreach ($group in $col.classificationTop.groupList)
#if ($group.hasGroupComment())
    /**
     * ${group.groupCommentForJavaDoc} <br />
     * ${group.buildElementDisp()}
     * @return The determination, true or false.
     */
#end
    def is${col.javaName}_${group.groupNameInitCap}(): Boolean = {
        val cdef: ${glCDef}.${col.classificationName} = ${col.uncapitalisedJavaName}As${col.classificationName}();
        return cdef != null && cdef.is${group.groupNameInitCap}();
    }

#end
#end
#end
#if ($table.hasImplicitClassification())
    // ===================================================================================
    //                                                           Classification Name/Alias
    //                                                           =========================
#foreach ($col in $table.columns)
#if ($col.hasClassification())
#if (!$col.isTableClassification())
#if ($col.hasClassificationName())
    /**
     * Get the value of the column '${col.uncapitalisedJavaName}' as classification name.
     * @return The string of classification name. (NullAllowed: when the column value is null)
     */
    def ${col.uncapitalisedJavaName}Name(): String = {
        val cdef: ${glCDef}.${col.classificationName} = ${col.uncapitalisedJavaName}As${col.classificationName}();
        return if (cdef != null) { cdef.name() } else { null };
    }

#end
#if (${col.hasClassificationAlias()})
    /**
     * Get the value of the column '${col.uncapitalisedJavaName}' as classification alias.
     * @return The string of classification alias. (NullAllowed: when the column value is null)
     */
    def ${col.uncapitalisedJavaName}Alias(): String = {
        val cdef: ${glCDef}.${col.classificationName} = ${col.uncapitalisedJavaName}As${col.classificationName}();
        return if (cdef != null) { cdef.alias } else { null };
    }

#end
#end
#end
#end
#end
#end
    // ===================================================================================
    //                                                                    Foreign Property
    //                                                                    ================
#foreach ($fk in $table.foreignKeys)
#set ($foreignTable = $fk.foreignTable)
#set ($foreignEntityClassName = "${fk.foreignPropertyEntityDefinitionType}")
#set ($foreignVariableName = "_${fk.foreignPropertyName}")
    /** ${fk.foreignSimpleDisp}. */
    protected var ${foreignVariableName}: ${foreignEntityClassName} = null;

    /**
     * ${fk.foreignDispForJavaDoc}
     * @return The entity of foreign property '${fk.foreignJavaBeansRulePropertyName}'. (NullAllowed: when e.g. null FK column, no setupSelect)
     */
    def ${fk.foreignJavaBeansRulePropertyName}(): ${foreignEntityClassName} = {
#if ($foreignTable.canBeRelationalNullObjectForeign())
        if (${foreignVariableName} == null) {
            ${foreignVariableName} = ${fk.relationalNullObjectProviderForeignExp};
        }
#end
#if ($fk.isForeignPropertyOptionalEntity())
        return if (${foreignVariableName} != null) { ${foreignVariableName}; } else { ${database.relationOptionalEntityClassName}.empty; }
#else
        return ${foreignVariableName};
#end
    }

    /**
     * ${fk.foreignDispForJavaDoc}
     * @param ${fk.foreignPropertyName} The entity of foreign property '${fk.foreignJavaBeansRulePropertyName}'. (NullAllowed)
     */
    def ${fk.foreignJavaBeansRulePropertyName}(${fk.foreignPropertyName}: ${foreignEntityClassName}): Unit = {
        ${foreignVariableName} = ${fk.foreignPropertyName};
    }
#if ($table.isMakeEntityChaseRelation())

    def chase${fk.foreignJavaBeansRulePropertyNameInitCap}(): ${foreignEntityClassName} = {
        return ${foreignVariableName} != null ? ${foreignVariableName} : new ${foreignEntityClassName}();
    }
#end

#end
#foreach ($referrer in $table.referrerAsOneList)
#set ($referrerTable = $referrer.table)
#set ($referrerEntityClassName = "${referrer.referrerPropertyEntityDefinitionTypeAsOne}")
#set ($referrerVariableName = "_${referrer.referrerPropertyNameAsOne}")
    /** ${referrer.referrerSimpleDispAsOne}. */
    protected var ${referrerVariableName}: ${referrerEntityClassName} = null;

    /**
     * ${referrer.referrerDispAsOneForJavaDoc}
     * @return the entity of foreign property(referrer-as-one) '${referrer.referrerJavaBeansRulePropertyNameAsOne}'. (NullAllowed: when e.g. no data, no setupSelect)
     */
    def ${referrer.referrerJavaBeansRulePropertyNameAsOne}(): ${referrerEntityClassName} = {
#if ($referrerTable.canBeRelationalNullObjectForeign())
        if (${referrerVariableName} == null) {
            ${referrerVariableName} = ${referrer.relationalNullObjectProviderReferrerExp};
        }
#end
#if ($referrer.isReferrerPropertyOptionalEntityAsOne())
        return if (${referrerVariableName} != null) { ${referrerVariableName}; } else { ${database.relationOptionalEntityClassName}.empty; }
#else
        return ${referrerVariableName};
#end
    }

    /**
     * ${referrer.referrerDispAsOneForJavaDoc}
     * @param ${referrer.referrerJavaBeansRulePropertyNameAsOne} The entity of foreign property(referrer-as-one) '${referrer.referrerJavaBeansRulePropertyNameAsOne}'. (NullAllowed)
     */
    def ${referrer.referrerJavaBeansRulePropertyNameAsOne}(${referrer.referrerJavaBeansRulePropertyNameAsOne}: ${referrerEntityClassName}): Unit = {
        ${referrerVariableName} = ${referrer.referrerJavaBeansRulePropertyNameAsOne};
    }
#if ($table.isMakeEntityChaseRelation())

    def chase${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}(): ${referrerEntityClassName} = {
        return ${referrerVariableName} != null ? ${referrerVariableName} : new ${referrerEntityClassName}();
    }
#end

#end
    // ===================================================================================
    //                                                                   Referrer Property
    //                                                                   =================
#foreach ($referrer in $table.referrerAsManyList)
#set ($referrerTable = $referrer.table)
#set ($referrerEntityClassName = "${referrer.referrerTableExtendedEntityClassName}")
#set ($referrerVariableName = "_${referrer.referrerPropertyName}")
    /** ${referrer.referrerSimpleDisp}. */
    protected var $referrerVariableName: scala.collection.immutable.List[${referrerEntityClassName}] = null;

    /**
     * ${referrer.referrerDispForJavaDoc}
     * @return The entity list of referrer property '${referrer.referrerJavaBeansRulePropertyName}'. (NotNull: even if no loading, returns empty list)
     */
    def ${referrer.referrerJavaBeansRulePropertyName}(): scala.collection.immutable.List[${referrerEntityClassName}] = {
        if (${referrerVariableName} == null) { ${referrerVariableName} = newReferrerList(); }
        return ${referrerVariableName};
    }

    /**
     * ${referrer.referrerDispForJavaDoc}
     * @param ${referrer.referrerPropertyName} The entity list of referrer property '${referrer.referrerJavaBeansRulePropertyName}'. (NullAllowed)
     */
    def ${referrer.referrerJavaBeansRulePropertyName}(${referrer.referrerPropertyName}: scala.collection.immutable.List[${referrerEntityClassName}]): Unit = {
        ${referrerVariableName} = ${referrer.referrerPropertyName};
    }

#end
#if ($table.isLoadableCustomizeEntity())
#set ($domain = $table.loadableCustomizeDomain)
    protected var __innerDomain: ${domain.extendedEntityClassName} = null;

    protected def innerDomain(): ${domain.extendedEntityClassName} = {
        if (__innerDomain == null) {
            __innerDomain = new ${domain.extendedEntityClassName}();
        }
        return __innerDomain;
    }

    /**
     * Prepare the inner instance of domain entity (basically for LoadReferrer).
     * <pre>
     * List&lt;UnpaidSummaryMember&gt; memberList = memberBhv.outsideSql()...;
     * List&lt;Member&gt; domainList = new ArrayList&lt;Member&gt;();
     * for (UnpaidSummaryMember member : memberList) {
     *     domainList.add(member.<span style="color: #DD4747">prepareDomain()</span>);
     * }
     * memberBhv.<span style="color: #DD4747">loadPurchaseList</span>(domainList, new ConditionBeanSetupper...);
     * for (UnpaidSummaryMember member : memberList) {
     *     Purchase purchase = member.<span style="color: #DD4747">getPurchaseList()</span>; <span style="color: #3F7E5E">// you can get it</span>
     *     ...
     * }
     * </pre>
     * @return The domain entity for this customize entity. (NotNull)
     */
    def prepareDomain(): ${domain.extendedEntityClassName} = {
#foreach ($exp in $table.loadableCustomizePrimaryKeySettingExpressionList)
        innerDomain().${exp};
#end
        return innerDomain();
    }

#foreach ($referrer in $domain.referrerAsManyList)
#set ($referrerTable = $referrer.table)
#set ($referrerEntityClassName = "${referrer.referrerTableExtendedEntityClassName}")
    /**
     * ${referrer.referrerDispForJavaDoc}
     * @return The entity list of referrer property '${referrer.referrerJavaBeansRulePropertyName}'. (NotNull: If it's not loaded yet, initializes the list instance of referrer as empty and returns it.)
     */
    def get${referrer.referrerJavaBeansRulePropertyNameInitCap}(): List[${referrerEntityClassName}] = {
        return innerDomain().get${referrer.referrerJavaBeansRulePropertyNameInitCap}();
    }

#end
#end
    protected def newReferrerList[ELEMENT](): scala.collection.immutable.List[ELEMENT] = {
        return scala.collection.immutable.List(); // #pending actually fixed empty list
    }

    // ===================================================================================
    //                                                                 Modified Properties
    //                                                                 ===================
    /**
     * {@inheritDoc}
     */
    def modifiedProperties(): Set[String] = {
        return __modifiedProperties.getPropertyNames();
    }

    /**
     * {@inheritDoc}
     */
    def clearModifiedInfo(): Unit = {
        __modifiedProperties.clear();
    }

    /**
     * {@inheritDoc}
     */
    def hasModification(): Boolean = {
        return !__modifiedProperties.isEmpty();
    }

    protected def newModifiedProperties(): EntityModifiedProperties = {
        return new EntityModifiedProperties();
    }

    // ===================================================================================
    //                                                                     Birthplace Mark
    //                                                                     ===============
    /**
     * {@inheritDoc}
     */
    def markAsSelect(): Unit = {
        __createdBySelect = true;
    }

    /**
     * {@inheritDoc}
     */
    def createdBySelect(): Boolean = {
        return __createdBySelect;
    }
#if (${table.hasAllCommonColumn()})

    // ===================================================================================
    //                                                                       Common Column
    //                                                                       =============
    /**
     * {@inheritDoc}
     */
    def enableCommonColumnAutoSetup(): Unit = {
        __canCommonColumnAutoSetup = true;
    }

    /**
     * {@inheritDoc}
     */
    def disableCommonColumnAutoSetup(): Unit = {
        __canCommonColumnAutoSetup = false;
    }

    /**
     * {@inheritDoc}
     */
    def canCommonColumnAutoSetup(): Boolean = {
        return __canCommonColumnAutoSetup;
    }
#end

    // ===================================================================================
    //                                                                      Basic Override
    //                                                                      ==============
    /**
     * Determine the object is equal with this. <br />
     * If primary-keys or columns of the other are same as this one, returns true.
     * @param obj The object as other entity. (NullAllowed: if null, returns false fixedly)
     * @return Comparing result.
     */
    override def equals(obj: Any) = {
        obj match {
            case obj: $myClassName => {
                val other: $myClassName = obj.asInstanceOf[$myClassName];
                {
#set ($equalsCount = 0)
#foreach ($col in $table.equalsHashcodeColumnList)
                    #if ($equalsCount > 0) &&#end xSV(${col.uncapitalisedJavaName}(), other.${col.uncapitalisedJavaName}())
#set ($equalsCount = $equalsCount + 1)
#end
                }
            }
            case _ => false
        }
    }
    protected def xSV(v1: Object, v2: Object): Boolean = {
        return FunCustodial.isSameValue(v1, v2);
    }

    /**
     * Calculate the hash-code from primary-keys or columns.
     * @return The hash-code from primary-key or columns.
     */
    override def hashCode(): Int = {
        var hs: Int = 17;
        hs = xCH(hs, getTableDbName());
#foreach ($col in $table.equalsHashcodeColumnList)
        hs = xCH(hs, ${col.uncapitalisedJavaName}());
#end
        return hs;
    }
    protected def xCH(hs: Int, value: Object): Int = {
        return FunCustodial.calculateHashcode(hs, value);
    }

    /**
     * {@inheritDoc}
     */
    def instanceHash(): Int = {
        return super.hashCode();
    }

    /**
     * Convert to display string of entity's data. (no relation data)
     * @return The display string of all columns and relation existences. (NotNull)
     */
    override def toString(): String = {
        return buildDisplayString(FunCustodial.toClassTitle(this), true, true);
    }

    /**
     * {@inheritDoc}
     */
    def toStringWithRelation(): String = {
        val sb: StringBuilder = new StringBuilder();
        sb.append(toString());
#if ($table.hasRelation())
        val li: String = "\n  ";
#foreach ($fk in $table.foreignKeys)
#set ($foreignVariableName = "_${fk.foreignPropertyName}")
        if (${foreignVariableName} != null)
        { sb.append(li).append(xbRDS(${foreignVariableName}, "${fk.foreignPropertyName}")); }
#end
#foreach ($referrer in $table.referrerAsOneList)
#set ($referrerVariableName = "_${referrer.referrerPropertyNameAsOne}")
        if (${referrerVariableName} != null)
        { sb.append(li).append(xbRDS(${referrerVariableName}, "${referrer.referrerPropertyNameAsOne}")); }
#end
#foreach ($referrer in $table.referrerAsManyList)
#set ($referrerVariableName = "_${referrer.referrerPropertyName}")
        if (${referrerVariableName} != null) {
            ${referrerVariableName}.foreach(et => { if (et != null) { sb.append(li).append(xbRDS(et, "${referrer.referrerPropertyName}")) } });
        }
#end
#end
        return sb.toString();
    }
#if ($table.hasRelation())
    protected def xbRDS(et: Entity, name: String): String = {
        return et.buildDisplayString(name, true, true);
    }
#end
#if ($table.hasOptionalRelation())
    protected def xbRDS[ET <: Entity](et: ${database.relationOptionalEntityClassName}[ET], name: String): String = {
        return et.get.buildDisplayString(name, true, true);
    }
#end

    /**
     * {@inheritDoc}
     */
    def buildDisplayString(name: String, column: Boolean, relation: Boolean): String = {
        val sb: StringBuilder = new StringBuilder();
        if (name != null) { sb.append(name).append(if (column || relation) { ":" } else { "" }); }
        if (column) { sb.append(buildColumnString()); }
        if (relation) { sb.append(buildRelationString()); }
        sb.append("@").append(Integer.toHexString(hashCode()));
        return sb.toString();
    }
    protected def buildColumnString(): String = {
        val sb: StringBuilder = new StringBuilder();
        val dm: String = ", ";
#foreach ($col in $table.columns)
#if ($col.isJavaNativeUtilDate())
        sb.append(dm).append(xfUD(${col.uncapitalisedJavaName}()));
#elseif ($col.isJavaNativeByteArray())
        sb.append(dm).append(xfBA(${col.uncapitalisedJavaName}()));
#else
        sb.append(dm).append(${col.uncapitalisedJavaName}());
#end
#end
        if (sb.length() > dm.length()) {
            sb.delete(0, dm.length());
        }
        sb.insert(0, "{").append("}");
        return sb.toString();
    }
#if ($table.hasUtilDateColumn())
    protected def xfUD(date: Date): String = { // formatUtilDate()
        return FunCustodial.toString(date, xgDP());
    }
    protected def xgDP(): String = { // getDatePattern
#if ($database.isDatabaseOracle())
        return "yyyy-MM-dd HH:mm:ss"; // time parts for Oracle only
#else
        return "yyyy-MM-dd";
#end
    }
#end
#if ($table.hasByteArrayColumn())
    protected def xfBA(bytes: byte[]): String = { // formatByteArray()
        return FunCustodial.toString(bytes);
    }
#end
    protected def buildRelationString(): String = {
#if ($table.hasRelation())
        val sb: StringBuilder = new StringBuilder();
        val cm: String = ",  ";
#foreach ($fk in $table.foreignKeys)
#set ($foreignVariableName = "_${fk.foreignPropertyName}")
        if (${foreignVariableName} != null) { sb.append(cm).append("${fk.foreignPropertyName}"); }
#end
#foreach ($referrer in $table.referrerAsOneList)
#set ($referrerVariableName = "_${referrer.referrerPropertyNameAsOne}")
        if (${referrerVariableName} != null) { sb.append(cm).append("${referrer.referrerPropertyNameAsOne}"); }
#end
#foreach ($referrer in $table.referrerAsManyList)
#set ($referrerVariableName = "_${referrer.referrerPropertyName}")
        if (${referrerVariableName} != null && !${referrerVariableName}.isEmpty)
        { sb.append(cm).append("${referrer.referrerPropertyName}"); }
#end
        if (sb.length() > cm.length()) {
            sb.delete(0, cm.length()).insert(0, "(").append(")");
        }
        return sb.toString();
#else
        return "";
#end
    }

    /**
     * Clone entity instance using super.clone(). (shallow copy) 
     * @return The cloned instance of this entity. (NotNull)
     */
    override def clone(): ${myExtendedObjectClassName} = {
        try {
            return super.clone().asInstanceOf[${myExtendedObjectClassName}];
        } catch {
            case e: CloneNotSupportedException => {
                throw new IllegalStateException("Failed to clone the entity: " + toString(), e);
            }
        }
    }

#set ($propertyLoopIndex = 0)
#foreach ($col in $table.columns)
#if ($propertyLoopIndex == 0)
    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
#else

#end
#if ($col.needsStringClobHandling())
    /** The value type annotation. {${col.columnDefinitionLineDisp}} */
    val ${col.javaBeansRulePropertyName}_VALUE_TYPE: String = "stringClobType";

#end
#if ($col.needsBytesOidHandling())
    /** The value type annotation. {${col.columnDefinitionLineDisp}} */
    val ${col.javaBeansRulePropertyName}_VALUE_TYPE: String = "bytesOidType";

#end
    /**
     * [get] ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br />
#if ($col.isCommentForJavaDocValid())
     * ${col.commentForJavaDoc}
#end
#if ($col.isNotNull())
     * @return The value of the column '${col.name}'. (basically NotNull if selected: for the constraint)
#else
     * @return The value of the column '${col.name}'. (NullAllowed even if selected: for no constraint)
#end
     */
    def ${col.uncapitalisedJavaName}(): ${col.javaNative} = {
#if ($col.isEntityConvertEmptyStringToNull())
        return convertEmptyToNull(_${col.uncapitalisedJavaName});
#else
        return _${col.uncapitalisedJavaName};
#end
    }

    /**
     * [set] ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br />
#if ($col.isCommentForJavaDocValid())
     * ${col.commentForJavaDoc}
#end
#if ($col.isNotNull())
     * @param ${col.uncapitalisedJavaName} The value of the column '${col.name}'. (basically NotNull if update: for the constraint)
#else
     * @param ${col.uncapitalisedJavaName} The value of the column '${col.name}'. (NullAllowed: null update allowed for no constraint)
#end
     */
    ${col.propertySettingModifierAsPrefix}def ${col.uncapitalisedJavaName}(${col.uncapitalisedJavaName}: ${col.javaNative}): Unit = {
#if ($col.hasCheckImplicitSetClassification())
        checkImplicitSet("${col.name}", ${glCDef}.DefMeta.${col.classificationName}, ${col.uncapitalisedJavaName});
#end
        __modifiedProperties.addPropertyName("${col.javaBeansRulePropertyName}");
        this._${col.uncapitalisedJavaName} = ${col.uncapitalisedJavaName};
    }
#set ($propertyLoopIndex = $propertyLoopIndex + 1)
#end
#if ($table.hasAllCommonColumn())
#foreach ($columnName in ${database.commonColumnNameConversionList})
#set ($filteredColumnName = ${database.filterCommonColumn(${columnName})})
#set ($commonColumnMap = ${database.commonColumnMap})
#set ($columnType = ${commonColumnMap.get(${columnName})})
#set ($javaNative = ${database.convertJavaNativeByJdbcType(${columnType})})
#set ($javaName = ${database.convertJavaNameByJdbcNameAsColumn(${filteredColumnName})})
#set ($uncapitalisedJavaName = ${database.convertUncapitalisedJavaNameByJdbcNameAsColumn(${filteredColumnName})})
#set ($targetUncapitalisedJavaName = ${table.findTargetColumnUncapitalisedJavaNameByCommonColumnName(${columnName})})

    /**
     * {@inheritDoc}
     */
    def ${uncapitalisedJavaName}(): ${javaNative} = {
        return ${targetUncapitalisedJavaName}();
    }

    /**
     * {@inheritDoc}
     */
    def ${uncapitalisedJavaName}(${uncapitalisedJavaName}: ${javaNative}): Unit = {
        ${targetUncapitalisedJavaName}(${uncapitalisedJavaName});
    }
#end
#end
#if ($table.hasEntityConvertEmptyStringToNull())

    protected def convertEmptyToNull(value: String): String = {
        return FunCustodial.convertEmptyToNull(value);
    }
#end
#if ($table.hasCheckImplicitSetClassification())

    protected def checkImplicitSet(columnDbName: String, meta: ${glCDef}.DefMeta, value: Object): Unit = {
        FunCustodial.checkImplicitSet(this, columnDbName, meta, value);
    }
#end
}
