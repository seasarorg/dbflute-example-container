##
## Copyright 2004-2014 the Seasar Foundation and the Others.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${database.allClassCopyright}package ${glPackageBaseParameterBean};
#set ($myClassName = "${myBaseParameterBeanClassName}")

import java.util._;

#if ($database.hasPmbMetaDataPagingExtension($pmbClassName))
import org.seasar.dbflute.cbean.SimplePagingBean;
#end
#if ($database.isPmbMetaDataForProcedure($pmbClassName))
import org.seasar.dbflute.outsidesql.ProcedurePmb;
#else
#if ($database.isPmbMetaDataTypedParameterBean($pmbClassName))
import org.seasar.dbflute.outsidesql.typed._;
#else
import org.seasar.dbflute.twowaysql.pmbean.ParameterBean;
#end
#end
import org.seasar.dbflute.jdbc._;
import org.seasar.dbflute.jdbc.ParameterUtil.ShortCharHandlingMode;
#if ($database.hasPmbMetaDataPropertyOptionAnyLikeSearch($pmbClassName))
import org.seasar.dbflute.cbean.coption.LikeSearchOption;
#end
#if ($database.hasPmbMetaDataPropertyOptionAnyFromTo($pmbClassName))
import org.seasar.dbflute.cbean.coption.FromToOption;
#end
import org.seasar.dbflute.util.DfCollectionUtil;
#if ($database.hasPmbMetaDataPropertyUseOriginalException($pmbClassName))
import org.seasar.dbflute.exception._;
#end
import org.seasar.dbflute.util.DfTypeUtil;
import ${glPackageBaseCommon}._;
#if ($database.isPmbMetaDataTypedParameterBean($pmbClassName))
#if ($database.isApplicationBehaviorProject())
import ${database.libraryBehaviorPackage}._;
#else
import ${glPackageExtendedBhv}._;
#end
#end
#if ($database.isPmbMetaDataTypedReturnDomainEntityPmb($pmbClassName))
#if ($database.isApplicationBehaviorProject())
import ${database.libraryEntityPackage}._;
#else
import ${glPackageExtendedEntity}._;
#end
#end
#if ($database.isPmbMetaDataTypedReturnCustomizeEntityPmb($pmbClassName) || $database.isPmbMetaDataProcedureRefCustomizeEntity($pmbClassName))
import ${glPackageExtendedCustomizeEntity}._;
#end

/**
#if ($database.isPmbMetaDataTypedParameterBean($pmbClassName))
 * The base class for typed parameter-bean of ${database.getPmbMetaDataBusinessName($pmbClassName)}. <br />
 * This is related to "<span style="color: #AD4747">${database.getPmbMetaDataBehaviorQueryPath($pmbClassName)}</span>" on ${database.getPmbMetaDataBehaviorClassName($pmbClassName)}.
#else
#if ($database.isPmbMetaDataForProcedure($pmbClassName))
 * The base class for procedure parameter-bean of ${database.getPmbMetaDataBusinessName($pmbClassName)}. <br />
 * This is related to "<span style="color: #AD4747">${database.getPmbMetaDataProcedureName($pmbClassName)}</span>".
#else
 * The base class for parameter-bean of ${database.getPmbMetaDataBusinessName($pmbClassName)}.
#end
#end
 * @author ${database.classAuthor}
 */
#if ($database.isPmbMetaDataForProcedure($pmbClassName))
public${database.getPmbMetaDataAbstractDefinition($pmbClassName)} class ${myClassName} extends ProcedurePmb with FetchBean {
#else
public${database.getPmbMetaDataAbstractDefinition($pmbClassName)} class ${myClassName}${database.getPmbMetaDataSuperClassDefinition($pmbClassName)}${database.getPmbMetaDataInterfaceDefinition($pmbClassName)} {
#end
#if ($database.isPmbMetaDataForProcedure($pmbClassName))

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    // -----------------------------------------------------
    //                                   Procedure Parameter
    //                                   -------------------
#if ($database.hasPmbMetaDataProcedureOverload($pmbClassName))
    // this procedure has overload parameters so you need to extend this class
    // and set up parameter annotations for one call of overload
#end
#set ($procedureParameterIndex = 0)
#set ($procedureNotParamResultIndex = 1000)
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
#set ($annotationPropName = ${propertyName})
#set ($propertyType = $database.getPmbMetaDataPropertyType($pmbClassName, $propertyName))
#if ($database.isPmbMetaDataPropertyOptionProcedureParameterIn($pmbClassName, $propertyName))
    val ${annotationPropName}_PROCEDURE_PARAMETER: String = "in, ${procedureParameterIndex}";
#set ($procedureParameterIndex = $procedureParameterIndex + 1)
#elseif ($database.isPmbMetaDataPropertyOptionProcedureParameterOut($pmbClassName, $propertyName))
    val ${annotationPropName}_PROCEDURE_PARAMETER: String = "out, ${procedureParameterIndex}";
#set ($procedureParameterIndex = $procedureParameterIndex + 1)
#elseif ($database.isPmbMetaDataPropertyOptionProcedureParameterInOut($pmbClassName, $propertyName))
    val ${annotationPropName}_PROCEDURE_PARAMETER: String = "inout, ${procedureParameterIndex}";
#set ($procedureParameterIndex = $procedureParameterIndex + 1)
#elseif ($database.isPmbMetaDataPropertyOptionProcedureParameterReturn($pmbClassName, $propertyName))
    val ${annotationPropName}_PROCEDURE_PARAMETER: String = "return, -1";
#elseif ($database.isPmbMetaDataPropertyOptionProcedureParameterResult($pmbClassName, $propertyName))
    val ${annotationPropName}_PROCEDURE_PARAMETER: String = "notParamResult, ${procedureNotParamResultIndex}";
#set ($procedureNotParamResultIndex = $procedureNotParamResultIndex + 1)
#end
#if ($database.needsPmbMetaDataProcedureParameterStringClobHandling($pmbClassName, $propertyName))
    val ${annotationPropName}_VALUE_TYPE: String = "stringClobType";
#end
#if ($database.needsPmbMetaDataProcedureParameterBytesOidHandling($pmbClassName, $propertyName))
    val ${annotationPropName}_VALUE_TYPE: String = "bytesOidType";
#end
#if ($database.needsPmbMetaDataProcedureParameterFixedLengthStringHandling($pmbClassName, $propertyName))
    val ${annotationPropName}_VALUE_TYPE: String = "fixedLengthStringType";
#end
#if ($database.needsPmbMetaDataProcedureParameterObjectBindingBigDecimalHandling($pmbClassName, $propertyName))
    val ${annotationPropName}_VALUE_TYPE: String = "objectBindingBigDecimalType";
#end
#if ($database.needsPmbMetaDataProcedureParameterOracleArrayHandling($pmbClassName, $propertyName))
    public static final ValueType ${annotationPropName}_VALUE_TYPE
            = new ${glDBFluteConfig}.ImplementedOracleArrayType
                  ("${database.getPmbMetaDataProcedureParameterOracleArrayTypeName($pmbClassName, $propertyName)}", ${database.getPmbMetaDataProcedureParameterOracleArrayElementJavaNativeTypeLiteral($pmbClassName, $propertyName)});
#end
#if ($database.needsPmbMetaDataProcedureParameterOracleStructHandling($pmbClassName, $propertyName))
    public static final ValueType ${annotationPropName}_VALUE_TYPE
            = new ${glDBFluteConfig}.ImplementedOracleStructType
                  ("${database.getPmbMetaDataProcedureParameterOracleStructTypeName($pmbClassName, $propertyName)}", ${database.getPmbMetaDataProcedureParameterOracleStructEntityTypeTypeLiteral($pmbClassName, $propertyName)});
#end
#end
#end

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
#set ($variableName = "_$database.initUncap(${propertyName})")
#set ($propertyType = $database.getPmbMetaDataPropertyType($pmbClassName, $propertyName))
#if ($database.isPmbMetaDataPropertyOptionClassificationFixedElement($pmbClassName, $propertyName))
    /** The parameter of ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)}. */
    protected var ${variableName}: ${propertyType} = ${database.getPmbMetaDataPropertyOptionClassificationFixedElementValueExp($pmbClassName, $propertyName)};

#else
    /** The parameter of ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)}. */
    protected var ${variableName}: ${propertyType} = null;

#end
#if ($database.hasPmbMetaDataPropertyOptionAnyLikeSearch($pmbClassName, $propertyName))
    /** The option of like-search for ${propertyName}. */
    protected var ${variableName}InternalLikeSearchOption: LikeSearchOption = null;

#end
#end
#if (!$database.hasPmbMetaDataCheckSafetyResult($pmbClassName))
    /** The max size of safety result. */
    protected var _safetyMaxResultSize: Integer = null;

#end
    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    /**
#if ($database.isPmbMetaDataTypedParameterBean($pmbClassName))
     * Constructor for the typed parameter-bean of ${database.getPmbMetaDataBusinessName($pmbClassName)}. <br />
     * This is related to "<span style="color: #AD4747">${database.getPmbMetaDataBehaviorQueryPath($pmbClassName)}</span>" on ${database.getPmbMetaDataBehaviorClassName($pmbClassName)}.
#else
#if ($database.isPmbMetaDataForProcedure($pmbClassName))
     * Constructor for the procedure parameter-bean of ${database.getPmbMetaDataBusinessName($pmbClassName)}. <br />
     * This is related to "<span style="color: #AD4747">${database.getPmbMetaDataProcedureName($pmbClassName)}</span>".
#else
     * Constructor for the parameter-bean of ${database.getPmbMetaDataBusinessName($pmbClassName)}.
#end
#end
     */
    public ${myClassName}() {
#if ($database.hasPmbMetaDataPagingExtension($pmbClassName))
        if (${glDBFluteConfig}.isPagingCountLater()) {
            enablePagingCountLater();
        }
#end
    }

#if ($database.isPmbMetaDataTypedParameterBean($pmbClassName))
    // ===================================================================================
    //                                                                Typed Implementation
    //                                                                ====================
    /**
     * {@inheritDoc}
     */
    def getOutsideSqlPath(): String = {
        return "${database.getPmbMetaDataBehaviorQueryPath($pmbClassName)}";
    }

#if ($database.isPmbMetaDataTypedSelectPmb($pmbClassName))
    /**
     * Get the type of an entity for result. (implementation)
     * @return The type instance of an entity, ${database.getPmbMetaDataCustomizeEntityLineDisp($pmbClassName)}. (NotNull)
     */
    public Class<${database.getPmbMetaDataCustomizeEntityType($pmbClassName)}> getEntityType() {
        return classOf[${database.getPmbMetaDataCustomizeEntityType($pmbClassName)}];
    }

#end
#end
#if ($database.isPmbMetaDataForProcedure($pmbClassName))
    // ===================================================================================
    //                                                            Procedure Implementation
    //                                                            ========================
    /**
     * {@inheritDoc}
     */
    def getProcedureName(): String = {
        return "${database.getPmbMetaDataProcedureName($pmbClassName)}";
    }

    /**
     * {@inheritDoc}
     */
     def isEscapeStatement(): Boolean = {
         return true; // as default
     }

    /**
     * {@inheritDoc}
     */
     def isCalledBySelect(): Boolean = {
         return ${database.isPmbMetaDataProcedureCalledBySelect($pmbClassName)}; // resolved by generator
     }

#end
#if (!$database.hasPmbMetaDataCheckSafetyResult($pmbClassName))
    // ===================================================================================
    //                                                                       Safety Result
    //                                                                       =============
    /**
     * {@inheritDoc}
     */
    def checkSafetyResult(safetyMaxResultSize: Integer): Unit = {
        _safetyMaxResultSize = safetyMaxResultSize;
    }

    /**
     * {@inheritDoc}
     */
    def getSafetyMaxResultSize(): Integer = {
        return _safetyMaxResultSize;
    }

#end
#if ($database.existsPmbMetaDataAlternateBooleanMethodNameSet($pmbClassName))
    // ===================================================================================
    //                                                                   Alternate Boolean
    //                                                                   =================
#foreach ($alternateBooleanMethodName in $database.getPmbMetaDataAlternateBooleanMethodNameSet($pmbClassName))
    /**
     * This is an alternate boolean method waiting for your overriding.
     * @return The determination, true or false for your complex conditions.
     */
    public abstract boolean ${alternateBooleanMethodName}();

#end
#end
    // ===================================================================================
    //                                                                       Assist Helper
    //                                                                       =============
    protected def filterStringParameter(value: String): String = {
        if (isEmptyStringParameterAllowed()) {
            return value;
        }
        return convertEmptyToNull(value);
    }

    protected def isEmptyStringParameterAllowed(): Boolean = {
	    return ${glDBFluteConfig}.isEmptyStringParameterAllowed();
    }

    protected def convertEmptyToNull(value: String): String = {
	    return ParameterUtil.convertEmptyToNull(value);
    }

    protected def handleShortChar(propertyName: String, value: String, size: Integer): String = {
        val mode: ShortCharHandlingMode = getShortCharHandlingMode(propertyName,  value,  size);
        return ParameterUtil.handleShortChar(propertyName, value, size, mode);
    }

    protected def getShortCharHandlingMode(propertyName: String, value: String, size: Integer): ShortCharHandlingMode = {
        return ShortCharHandlingMode.${database.shortCharHandlingMode};
    }

    @SuppressWarnings("unchecked")
    protected def newArrayList[ELEMENT](elements: ELEMENT...): ArrayList[ELEMENT] = {
        val obj: Object = DfCollectionUtil.newArrayList(elements);
        return (ArrayList<ELEMENT>)obj; // to avoid the warning between JDK6 and JDK7
    }

    @SuppressWarnings("unchecked")
    protected def toNumber[NUMBER <: Number](obj: Object, type: Class[NUMBER]): NUMBER = {
        return .asInstanceOf[NUMBER)DfTypeUtil.toNumber(obj, type];
    }

    protected def toBoolean(obj: Object): Boolean = {
        return DfTypeUtil.toBoolean(obj);
    }

    protected def toUtilDate(date: Date): Date = {
        return DfTypeUtil.toDate(date); // if sub class, re-create as pure date
    }

    protected def formatUtilDate(date: Date): String = {
#if ($database.isDatabaseOracle())
        val pattern: String = "yyyy-MM-dd HH:mm:ss"; // for Oracle
#else
        val pattern: String = "yyyy-MM-dd";
#end
        return DfTypeUtil.toString(date, pattern);
    }

    protected def formatByteArray(bytes: byte[]): String = {
        return "byte[" + (bytes != null ? String.valueOf(bytes.length) : "null") + "]";
    }

#if ($database.hasPmbMetaDataPropertyOptionAnyLikeSearch($pmbClassName))
    protected def assertLikeSearchOptionValid(name: String, option: LikeSearchOption): Unit = {
        if (option == null) {
            val msg: String = "The like-search option is required!";
            throw new RequiredOptionNotFoundException(msg);
        }
        if (option.isSplit()) {
            val msg: String = "The split of like-search is NOT available on parameter-bean.";
            msg = msg + " Don't use splitByXxx(): " + option;
            throw new IllegalOutsideSqlOperationException(msg);
        }
    }

#end
#if ($database.hasPmbMetaDataPropertyOptionAnyFromTo($pmbClassName))
    protected def assertFromToOptionValid(name: String, option: FromToOption): Unit = {
        if (option == null) {
            val msg: String = "The from-to option is required!";
            throw new RequiredOptionNotFoundException(msg);
        }
    }

#end
    // ===================================================================================
    //                                                                      Basic Override
    //                                                                      ==============
    /**
     * @return The display string of all parameters. (NotNull)
     */
    @Override
    def toString(): String = {
        val sb: StringBuilder = new StringBuilder();
        sb.append(DfTypeUtil.toClassTitle(this)).append(":");
        sb.append(xbuildColumnString());
        return sb.toString();
    }
    private def xbuildColumnString(): String = {
        val c: String = ",  ";
        val sb: StringBuilder = new StringBuilder();
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
#set ($variableName = "_$database.initUncap(${propertyName})")
#set ($propertyType = $database.getPmbMetaDataPropertyType($pmbClassName, $propertyName))
#if ($propertyType.equals("Date") || $propertyType.equals("java.util.Date"))
        sb.append(c).append(formatUtilDate(${variableName}));
#elseif ($propertyType.equals("byte[]"))
        sb.append(c).append(formatByteArray(${variableName}));
#else
        sb.append(c).append(${variableName});
#end
#end
        if (sb.length() > 0) { sb.delete(0, c.length()); }
        sb.insert(0, "{").append("}");
        return sb.toString();
    }

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
#set ($variableName = "_$database.initUncap(${propertyName})")
#set ($argumentName = "$database.initUncap(${propertyName})")
#set ($propertyType = $database.getPmbMetaDataPropertyType($pmbClassName, $propertyName))
    /**
     * [get] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br />
#if ($database.hasPropertyOptionComment($pmbClassName, $propertyName))
     * ${database.getPropertyOptionComment($pmbClassName, $propertyName)}
#end
     * @return The value of ${propertyName}. (Nullable, NotEmptyString(when String): if empty string, returns null)
     */
    def get${database.initCap($propertyName)}(): ${propertyType} = {
#if ($propertyType.endsWith("String"))
#if ($database.isShortCharHandlingValid() && $database.isPmbMetaDataPropertyRefColumnChar($pmbClassName, $propertyName))
        val filtered: String = filterStringParameter(${variableName});
        filtered = handleShortChar("${propertyName}", filtered, ${database.getPmbMetaDataPropertyRefSize($pmbClassName, $propertyName)});
        return filtered;
#else
        return filterStringParameter(${variableName});
#end
#else
#if ($propertyType.equals("Date") || $propertyType.equals("java.util.Date"))
        return toUtilDate(${variableName});
#else
        return ${variableName};
#end
#end
    }
#if (!$database.hasPmbMetaDataPropertyOptionOriginalOnlyOneSetter($pmbClassName, $propertyName))

    /**
     * [set] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br />
#if ($database.hasPropertyOptionComment($pmbClassName, $propertyName))
     * ${database.getPropertyOptionComment($pmbClassName, $propertyName)}
#end
     * @param ${argumentName} The value of ${propertyName}. (NullAllowed)
     */
    def set${database.initCap($propertyName)}(${propertyType} ${argumentName}): Unit = {
        ${variableName} = ${argumentName};
    }
#end
#if ($database.isPmbMetaDataPropertyOptionLikeSearch($pmbClassName, $propertyName))

    /**
     * [set as likeSearch] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br />
#if ($database.hasPropertyOptionComment($pmbClassName, $propertyName))
     * ${database.getPropertyOptionComment($pmbClassName, $propertyName)}
#end
     * @param ${argumentName} The value of ${propertyName}. (NullAllowed)
     * @param ${argumentName}Option The option of likeSearch for ${propertyName} which is NOT split mode. (NotNull)
     */
    def set${database.initCap($propertyName)}(${propertyType} ${argumentName}, LikeSearchOption ${argumentName}Option): Unit = {
        assertLikeSearchOptionValid("${argumentName}Option", ${argumentName}Option);
        ${variableName} = ${argumentName};
        ${variableName}InternalLikeSearchOption = ${argumentName}Option;
    }
#end
#if ($database.isPmbMetaDataPropertyOptionPrefixSearch($pmbClassName, $propertyName))

    /**
     * [set as prefixSearch] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br />
#if ($database.hasPropertyOptionComment($pmbClassName, $propertyName))
     * ${database.getPropertyOptionComment($pmbClassName, $propertyName)}
#end
     * @param ${argumentName} The value of ${propertyName}. (NullAllowed)
     */
    def set${database.initCap($propertyName)}_PrefixSearch(${propertyType} ${argumentName}): Unit = {
        ${variableName} = ${argumentName};
        ${variableName}InternalLikeSearchOption = new LikeSearchOption().likePrefix();
    }
#end
#if ($database.isPmbMetaDataPropertyOptionContainSearch($pmbClassName, $propertyName))

    /**
     * [set as containSearch] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br />
#if ($database.hasPropertyOptionComment($pmbClassName, $propertyName))
     * ${database.getPropertyOptionComment($pmbClassName, $propertyName)}
#end
     * @param ${argumentName} The value of ${propertyName}. (NullAllowed)
     */
    def set${database.initCap($propertyName)}_ContainSearch(${propertyType} ${argumentName}): Unit = {
        ${variableName} = ${argumentName};
        ${variableName}InternalLikeSearchOption = new LikeSearchOption().likeContain();
    }
#end
#if ($database.isPmbMetaDataPropertyOptionSuffixSearch($pmbClassName, $propertyName))

    /**
     * [set as suffixSearch] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br />
#if ($database.hasPropertyOptionComment($pmbClassName, $propertyName))
     * ${database.getPropertyOptionComment($pmbClassName, $propertyName)}
#end
     * @param ${argumentName} The value of ${propertyName}. (NullAllowed)
     */
    def set${database.initCap($propertyName)}_SuffixSearch(${propertyType} ${argumentName}): Unit = {
        ${variableName} = ${argumentName};
        ${variableName}InternalLikeSearchOption = new LikeSearchOption().likeSuffix();
    }
#end
#if ($database.hasPmbMetaDataPropertyOptionAnyLikeSearch($pmbClassName, $propertyName))

    /**
     * Get the internal option of likeSearch for ${propertyName}. {Internal Method: Don't invoke this}
     * @return The internal option of likeSearch for ${propertyName}. (NullAllowed)
     */
    def get${database.initCap($propertyName)}InternalLikeSearchOption(): LikeSearchOption = {
        return ${variableName}InternalLikeSearchOption;
    }
#end
#if ($database.isPmbMetaDataPropertyOptionFromDate($pmbClassName, $propertyName))

    /**
     * [set as fromDate] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br />
#if ($database.hasPropertyOptionComment($pmbClassName, $propertyName))
     * ${database.getPropertyOptionComment($pmbClassName, $propertyName)}
#end
     * @param ${argumentName} The value of ${propertyName}. (NullAllowed)
     */
    def set${database.initCap($propertyName)}_FromDate(${propertyType} ${argumentName}): Unit = {
        ${variableName} = new FromToOption().compareAsDate().filterFromDate(${argumentName});
    }
#end
#if ($database.isPmbMetaDataPropertyOptionFromDateOption($pmbClassName, $propertyName))

    /**
     * [set as fromScope] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br />
#if ($database.hasPropertyOptionComment($pmbClassName, $propertyName))
     * ${database.getPropertyOptionComment($pmbClassName, $propertyName)}
#end
     * @param ${argumentName} The value of ${propertyName}. (NullAllowed)
     * @param ${argumentName}Option The option of from-to scope for ${propertyName}. (NotNull)
     */
    def set${database.initCap($propertyName)}_FromDate(${propertyType} ${argumentName}, FromToOption ${argumentName}Option): Unit = {
        assertFromToOptionValid("${argumentName}Option", ${argumentName}Option);
        ${variableName} = ${argumentName}Option.filterFromDate(${argumentName});
    }
#end
#if ($database.isPmbMetaDataPropertyOptionToDate($pmbClassName, $propertyName))

    /**
     * [set as toDate] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br />
#if ($database.hasPropertyOptionComment($pmbClassName, $propertyName))
     * ${database.getPropertyOptionComment($pmbClassName, $propertyName)}
#end
     * @param ${argumentName} The value of ${propertyName}. (NullAllowed)
     */
    def set${database.initCap($propertyName)}_ToDate(${propertyType} ${argumentName}): Unit = {
        ${variableName} = new FromToOption().compareAsDate().filterToDate(${argumentName});
    }
#end
#if ($database.isPmbMetaDataPropertyOptionToDateOption($pmbClassName, $propertyName))

    /**
     * [set as toScope] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br />
#if ($database.hasPropertyOptionComment($pmbClassName, $propertyName))
     * ${database.getPropertyOptionComment($pmbClassName, $propertyName)}
#end
     * @param ${argumentName} The value of ${propertyName}. (NullAllowed)
     * @param ${argumentName}Option The option of from-to scope for ${propertyName}. (NotNull)
     */
    def set${database.initCap($propertyName)}_ToDate(${propertyType} ${argumentName}, FromToOption ${argumentName}Option): Unit = {
        assertFromToOptionValid("${argumentName}Option", ${argumentName}Option);
        ${variableName} = ${argumentName}Option.filterToDate(${argumentName});
    }
#end
#if ($database.isPmbMetaDataPropertyOptionClassificationSetter($pmbClassName, $propertyName))
#foreach ($classificationElement in $database.getPmbMetaDataPropertyOptionClassificationTop($pmbClassName, $propertyName).classificationElementList)

    /**
     * [set as ${classificationElement.name}] ${propertyName}${database.getPmbMetaDataPropertyRefColumnInfo($pmbClassName, $propertyName)} <br />
#if ($database.hasPropertyOptionComment($pmbClassName, $propertyName))
     * ${database.getPropertyOptionComment($pmbClassName, $propertyName)} <br />
#end
#if ($classificationElement.hasComment())
     * ${classificationElement.comment}
#end
     */
    def set${database.initCap($propertyName)}_${classificationElement.name}(): Unit = {
        ${variableName} = ${database.getPmbMetaDataPropertyOptionClassificationSettingElementValueExp($pmbClassName, $propertyName, $classificationElement.name)};
    }
#end
#end

#end
}
